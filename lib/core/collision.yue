import 'ffi'
import 'lib.math.Vector2'
import RL from yuema

collisionPoint = ffi.new('Vector2[1]')

{
	Ray: ffi.typeof('Ray')
	RayCollision: ffi.typeof('RayCollision')

	checkRecs: (rec1, rec2) -> RL.CheckCollisionRecs(rec1, rec2)
	checkCircles: (center1, radius1, center2, radius2) -> RL.CheckCollisionCircles(center1, radius1, center2, radius2)
	checkCircleRec: (center, radius, rec) -> RL.CheckCollisionCircleRec(center, radius, rec)
	checkPointRec: (point, rec) -> RL.CheckCollisionPointRec(point, rec)
	checkPointCircle: (point, center, radius) -> RL.CheckCollisionPointCircle(point, center, radius)
	checkPointTriangle: (point, p1, p2, p3) -> RL.CheckCollisionPointTriangle(point, p1, p2, p3)
	checkPointLine: (point, p1, p2, threshold) -> RL.CheckCollisionPointLine(point, p1, p2, threshold)
	getRec: (rec1, rec2) -> RL.GetCollisionRec(rec1, rec2)
	checkSpheres: (center1, radius1, center2, radius2) -> RL.CheckCollisionSpheres(center1, radius1, center2, radius2)
	checkBoxes: (box1, box2) -> RL.CheckCollisionBoxes(box1, box2)
	checkBoxSphere: (box, center, radius) -> RL.CheckCollisionBoxSphere(box, center, radius)
	getRaySphere: (ray, center, radius) -> RL.GetRayCollisionSphere(ray, center, radius)
	getRayBox: (ray, box) -> RL.GetRayCollisionBox(ray, box)
	getRayModel: (ray, model) -> RL.GetRayCollisionModel(ray, model)
	getRayMesh: (ray, mesh, transform) -> RL.GetRayCollisionMesh(ray, mesh, transform)
	getRayTriangle: (ray, p1, p2, p3) -> RL.GetRayCollisionTriangle(ray, p1, p2, p3)
	getRayQuad: (ray, p1, p2, p3, p4) -> RL.GetRayCollisionQuad(ray, p1, p2, p3, p4)

	checkLines: (startPos1, endPos1, startPos2, endPos2) ->
		result = RL.CheckCollisionLines(startPos1, endPos1, startPos2, endPos2, collisionPoint)
		result, result and Vector2(collisionPoint[0]) or nil
}
