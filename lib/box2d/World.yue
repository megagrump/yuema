import 'ffi'
import B2D from yuema
import 'lib.util.ptr'
import 'lib.math.Vector2'
import 'lib.box2d._scale'
import 'lib.box2d.Body'
import 'lib.box2d.draw'
import 'lib.box2d.joints'

profile = ffi.new('b2cProfile')

tempVector = Vector2!
scaleUp2, scaleDown2 = _scale.up2, _scale.down2

emptyContactFilter = -> error("Invalid filter")
emptyListener = ->
rayCastCallback = nil
queryCallback = nil

doRayCast = (x1, y1, x2, y2) => B2D.b2World_RayCast(@, x1, y1, x2, y2)
jit.off(doRayCast) -- callbacks from jitted code are problematic

doQuery = (minX, minY, maxX, maxY) => B2D.b2World_QueryAABB(@, minX, minY, maxX, maxY)
jit.off(doQuery) -- callbacks from jitted code are problematic

World = ffi.typeof('b2World')

WorldMT = {
	__new: (gravityX, gravityY) =>
		world = ffi.gc(B2D.b2World_New(scaleDown2(gravityX, gravityY)), => @destroy!)
		with B2D
			.b2World_SetRayCastCallback(world, world._rayCastCallback)
			.b2World_SetQueryCallback(world, world._queryCallback)
			.b2World_SetContactFilter(world, emptyContactFilter)
			.b2World_SetContactListener(world, emptyListener, emptyListener, emptyListener, emptyListener)
		world

	destroy: =>
		ffi.gc(@, nil)
		with B2D
			.b2World_GetContactFilter(@)::free!
			.b2World_GetRayCastCallback(@)::free!
			.b2World_GetQueryCallback(@)::free!
			.b2World_GetBeginContactListener(@)::free!
			.b2World_GetEndContactListener(@)::free!
			.b2World_GetPreSolveContactListener(@)::free!
			.b2World_GetPostSolveContactListener(@)::free!
		body = @getBodyList!
		while body
			body = body::_deinit!::getNext!
		joint = @getJointList!
		while joint
			joint = joint::_deinit!::getNext!
		B2D.b2World_Destroy(@)

	destroyJoint: (joint) => B2D.b2World_DestroyJoint(@, joint::_deinit!)
	step: (timeStep, velocityIterations = 8, positionIterations = 3) => B2D.b2World_Step(@, timeStep, velocityIterations, positionIterations)
	clearForces: => B2D.b2World_ClearForces(@)

	setContactListener: (beginContact, endContact, preSolve, postSolve) =>
		with B2D
			.b2World_GetBeginContactListener(@)::set(beginContact or emptyListener)
			.b2World_GetEndContactListener(@)::set(endContact or emptyListener)
			.b2World_GetPreSolveContactListener(@)::set(preSolve or emptyListener)
			.b2World_GetPostSolveContactListener(@)::set(postSolve or emptyListener)

			.b2World_EnableContactListener(@,
				not not beginContact,
				not not endContact,
				not not preSolveContact,
				not not postSolveContact
			)

	setContactFilter: (filter) =>
		B2D.b2World_GetContactFilter(@)::set(filter or emptyContactFilter)
		B2D.b2World_EnableContactFilter(@, not not filter)

	_queryCallback: (fixture) -> queryCallback(fixture)

	queryAABB: (minX, minY, maxX, maxY, callback) =>
		queryCallback = callback
		minX, minY = scaleDown2(minX, minY)
		maxX, maxY = scaleDown2(maxX, maxY)
		doQuery(@, minX, minY, maxX, maxY)
		queryCallback = nil

	_rayCastCallback: (fixture, x, y, nx, ny, fraction) ->
		x, y = scaleUp2(x, y)
		rayCastCallback(fixture, x, y, nx, ny, fraction)

	rayCast: (x1, y1, x2, y2, callback) =>
		rayCastCallback = callback
		x1, y1 = scaleDown2(x1, y1)
		x2, y2 = scaleDown2(x2, y2)
		doRayCast(@, x1, y1, x2, y2)
		rayCastCallback = nil

	getBodyList: => ptr(B2D.b2World_GetBodyList(@))
	getJointList: => ptr(B2D.b2World_GetJointList(@))?::_upCast!
	getGroundBody: => B2D.b2World_GetGroundBody(@)
	getContactList: => ptr(B2D.b2World_GetContactList(@))
	setAllowSleeping: B2D.b2World_SetAllowSleeping
	getAllowSleeping: B2D.b2World_GetAllowSleeping
	setWarmStarting: B2D.b2World_SetWarmStarting
	getWarmStarting: B2D.b2World_GetWarmStarting
	setContinuousPhysics: B2D.b2World_SetContinuousPhysics
	getContinuousPhysics: b2World_GetContinuousPhysics
	setSubStepping: B2D.b2World_SetSubStepping
	getSubStepping: B2D.b2World_GetSubStepping
	getProxyCount: B2D.b2World_GetProxyCount
	getBodyCount: B2D.b2World_GetBodyCount
	getJointCount: B2D.b2World_GetJointCount
	getContactCount: B2D.b2World_GetContactCount
	getTreeHeight: B2D.b2World_GetTreeHeight
	getTreeBalance: B2D.b2World_GetTreeBalance
	getTreeQuality: B2D.b2World_GetTreeQuality
	setGravity: (gravityX, gravityY) => B2D.b2World_SetGravity(@, scaleDown2(gravityX, gravityY))
	getGravity: =>
		{ :x, :y } = B2D.b2World_GetGravity(@, tempVector)
		scaleUp2(x, y)

	isLocked: B2D.b2World_IsLocked
	setAutoClearForces: B2D.b2World_SetAutoClearForces
	getAutoClearForces: B2D.b2World_GetAutoClearForces
	shiftOrigin: (x, y) => B2D.b2World_ShiftOrigin(@, scaleDown2(x, y))
	getProfile: => B2D.b2World_GetProfile(@, profile)
	dump: B2D.b2World_Dump
	debugDraw: draw
}

jit.off(WorldMT.step) -- required to make callbacks work

WorldMT.__index = WorldMT

ffi.metatype(World, WorldMT)
