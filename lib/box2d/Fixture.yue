import 'ffi'
import B2D from yuema
import 'lib.util.ptr'
import 'lib.ray.Rectangle'
import 'lib.box2d._scale'
import 'lib.box2d.ShapeType' as :TypeNames

tempFilter = ffi.new('b2cFilter')
tempRayCast = ffi.new('b2cRayCastOutput')
tempMassData = ffi.new('b2cMassData')
tempRect = Rectangle!

Fixture = ffi.typeof('b2Fixture')

FixtureMT = {
	getType: => TypeNames[B2D.b2Fixture_GetType(@)]
	getShape: => B2D.b2Fixture_GetShape(@)::_upCast!
	setSensor: B2D.b2Fixture_SetSensor
	isSensor: B2D.b2Fixture_IsSensor
	setFilterData: B2D.b2Fixture_SetFilterData
	getFilterData: =>
		data = B2D.b2Fixture_GetFilterData(@, tempFilter)
		data.category, data.mask, data.group

	refilter: B2D.b2Fixture_Refilter
	getBody: => ptr(B2D.b2Fixture_GetBody(@))
	getNext: => ptr(B2D.b2Fixture_GetNext(@))
	getUserData: => yuema.getRef(tonumber(B2D.b2Fixture_GetUserData(@)))
	setUserData: (data) =>
		ref = yuema.pushRef(data, tonumber(B2D.b2Fixture_GetUserData(@)))
		B2D.b2Fixture_SetUserData(@, ref)

	testPoint: B2D.b2Fixture_TestPoint
	rayCast: (x1, y1, x2, y2, maxFraction, childIndex) =>
		x1, y1 = _scale.down(x1, y1)
		x2, y2 = _scale.down(x2, y2)
		result = B2D.b2Fixture_RayCast(@, x1, y1, x2, y2, maxFraction, childIndex, tempRayCast)
		result.hit, result.nx, result.ny, result.fraction

	getMassData: =>
		data = B2D.b2Fixture_GetMassData(@, tempMassData)
		x, y = _scale.up(data.x, data.y)
		inertia = _scale.up(_scale.up(data.inertia))
		x, y, data.mass, inertia

	setDensity: B2D.b2Fixture_SetDensity
	getDensity: B2D.b2Fixture_GetDensity
	getFriction: B2D.b2Fixture_GetFriction
	setFriction: B2D.b2Fixture_SetFriction
	getRestitution: B2D.b2Fixture_GetRestitution
	setRestitution: B2D.b2Fixture_SetRestitution
	getRestitutionThreshold: B2D.b2Fixture_GetRestitutionThreshold
	setRestitutionThreshold: B2D.b2Fixture_SetRestitutionThreshold
	getAABB: (childIndex = 0) =>
		aabb = B2D.b2Fixture_GetAABB(@, childIndex, tempRect)
		x, y = _scale.up(aabb.x, aabb.y)
		w, h = _scale.up(aabb.width, aabb.height)
		x, y, w, h

	dump: B2D.b2Fixture_Dump

	_deinit: =>
		@setUserData(nil)
		@
}

FixtureMT.__index = FixtureMT

ffi.metatype(Fixture, FixtureMT)
