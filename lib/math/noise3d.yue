import 'ffi'
import 'bit' as :band
import floor from math

GRADX = ffi.new('double[12]', 1, -1, 1, -1, 1, -1, 1, -1, 0, 0, 0, 0)
GRADY = ffi.new('double[12]', 1, 1, -1, -1, 0, 0, 0, 0, 1, -1, 1, -1)
GRADZ = ffi.new('double[12]', 0, 0, 0, 0, 1, 1, -1, -1, 1, 1, -1, -1)

PERM = ffi.new('uint8_t[512]')
do
	p = {
		151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
		140,  36, 103,  30,  69, 142,   8,  99,  37, 240,  21,  10,  23, 190,   6, 148,
		247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
		 57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
		 74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
		 60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54,
		 65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
		200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
		 52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
		207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
		119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
		129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
		218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241,
		 81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
		184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
		222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180,
	}
	PERM[i] = p[band(i, 255) + 1] for i = 0, 511

gradient = (i, x, y, z) -> GRADX[i % 12] * x + GRADY[i % 12] * y + GRADZ[i % 12] * z

G3 = 1 / 6

noise = (x, y, z) ->
	local i, j, k
	do
		s = (x + y + z) * (1 / 3)
		i, j, k = floor(x + s), floor(y + s), floor(z + s)

	local x0, y0, z0
	do
		t = (i + j + k) * G3
		X0, Y0, Z0 = i - t, j - t, k - t
		x0, y0, z0 = x - X0, y - Y0, z - Z0
		i, j, k = band(i, 255), band(j, 255), band(k, 255)

	i1, j1, k1, i2, j2, k2 = 0, 0, 0, 0, 0, 0
	if x0 >= y0
		i2 = 1
		if y0 >= z0
			i1, j2 = 1, 1 --XYZ
		elseif x0 >= z0
			i1, k2 = 1, 1 --XZY
		else
			k1, k2 = 1, 1 --ZXY
	else
		j2 = 1
		if y0 < z0
			k1, k2 = 1, 1 --ZYX
		elseif x0 < z0
			j1, k2 = 1, 1 --YZX
		else
			j1, i2 = 1, 1 --YXZ

	n = 0
	do
		t = .6 - x0 * x0 - y0 * y0 - z0 * z0
		if t > 0
			g = PERM[i + PERM[j + PERM[k]]]
			n = t * t * t * t * gradient(g, x0, y0, z0)

	do
		x1, y1, z1 = x0 - i1 + G3, y0 - j1 + G3, z0 - k1 + G3
		t = .6 - x1 * x1 - y1 * y1 - z1 * z1
		if t > 0
			g = PERM[i + i1 + PERM[j +j1 + PERM[k + k1]]]
			n += t * t * t * t * gradient(g, x1, y1, z1)

	do
		x2, y2, z2 = x0 - i2 + 2 * G3, y0 - j2 + 2 * G3, z0 - k2 + 2 * G3
		t = .6 - x2 * x2 - y2 * y2 - z2 * z2
		if t > 0
			g = PERM[i + i2 + PERM[j +j2 + PERM[k + k2]]]
			n += t * t * t * t * gradient(g, x2, y2, z2)

	do
		x3, y3, z3 = x0 - 1 + 3 * G3, y0 - 1 + 3 * G3, z0 - 1 + 3 * G3
		t = .6 - x3 * x3 - y3 * y3 - z3 * z3
		if t > 0
			g = PERM[i + 1 + PERM[j + 1 + PERM[k + 1]]]
			n += t * t * t * t * gradient(g, x3, y3, z3)

	16 * n + .5

noise
