-- MIT LICENSE
--
-- Copyright (c) 2017 Enrique GarcÃ­a Cota, Yuichi Tateno, Emmanuel Oga
-- Copyright (c) 2021-2022 megagrump@pm.me
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so, subject to
-- the following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import pow, sin, cos, pi, sqrt, abs, asin from math

export linear = (t, b, c, d) -> c * t / d + b

export inQuad = (t, b, c, d) -> c * pow(t / d, 2) + b

export outQuad = (t, b, c, d) ->
	t = t / d
	-c * t * (t - 2) + b

export inOutQuad = (t, b, c, d) ->
	t = t / d * 2
	return c / 2 * pow(t, 2) + b if t < 1
	-c / 2 * ((t - 1) * (t - 3) - 1) + b

export outInQuad = (t, b, c, d) ->
	return outQuad(t * 2, b, c / 2, d) if t < d / 2
	inQuad((t * 2) - d, b + c / 2, c / 2, d)

export inCubic = (t, b, c, d) -> c * pow(t / d, 3) + b

export outCubic = (t, b, c, d) -> c * (pow(t / d - 1, 3) + 1) + b

export inOutCubic = (t, b, c, d) ->
	t = t / d * 2
	return c / 2 * t * t * t + b if t < 1
	t = t - 2
	c / 2 * (t * t * t + 2) + b

export outInCubic = (t, b, c, d) ->
	return outCubic(t * 2, b, c / 2, d) if t < d / 2
	inCubic((t * 2) - d, b + c / 2, c / 2, d)

export inQuart = (t, b, c, d) -> c * pow(t / d, 4) + b

export outQuart = (t, b, c, d) -> -c * (pow(t / d - 1, 4) - 1) + b

export inOutQuart = (t, b, c, d) ->
	t = t / d * 2
	return c / 2 * pow(t, 4) + b if t < 1
	-c / 2 * (pow(t - 2, 4) - 2) + b

export outInQuart = (t, b, c, d) ->
	return outQuart(t * 2, b, c / 2, d) if t < d / 2
	inQuart((t * 2) - d, b + c / 2, c / 2, d)

export inQuint = (t, b, c, d) -> c * pow(t / d, 5) + b

export outQuint = (t, b, c, d) -> c * (pow(t / d - 1, 5) + 1) + b

export inOutQuint = (t, b, c, d) ->
	t = t / d * 2
	return c / 2 * pow(t, 5) + b if t < 1
	c / 2 * (pow(t - 2, 5) + 2) + b

export outInQuint = (t, b, c, d) ->
	return outQuint(t * 2, b, c / 2, d) if t < d / 2
	inQuint((t * 2) - d, b + c / 2, c / 2, d)


export inSine = (t, b, c, d) -> -c * cos(t / d * (pi / 2)) + c + b

export outSine = (t, b, c, d) -> c * sin(t / d * (pi / 2)) + b

export inOutSine = (t, b, c, d) -> -c / 2 * (cos(pi * t / d) - 1) + b

export outInSine = (t, b, c, d) ->
	return outSine(t * 2, b, c / 2, d) if t < d / 2
	inSine((t * 2) - d, b + c / 2, c / 2, d)

export inExpo = (t, b, c, d) ->
	return b if t == 0
	c * pow(2, 10 * (t / d - 1)) + b - c * 0.001

export outExpo = (t, b, c, d) ->
	return b + c if t == d
	c * 1.001 * (-pow(2, -10 * t / d) + 1) + b

export inOutExpo = (t, b, c, d) ->
	return b if t == 0
	return b + c if t == d
	t = t / d * 2
	return c / 2 * pow(2, 10 * (t - 1)) + b - c * 0.0005 if t < 1
	c / 2 * 1.0005 * (-pow(2, -10 * (t - 1)) + 2) + b

export outInExpo = (t, b, c, d) ->
	return outExpo(t * 2, b, c / 2, d) if t < d / 2
	inExpo((t * 2) - d, b + c / 2, c / 2, d)

export inCirc = (t, b, c, d) -> -c * (sqrt(1 - pow(t / d, 2)) - 1) + b

export outCirc = (t, b, c, d) ->  c * sqrt(1 - pow(t / d - 1, 2)) + b

export inOutCirc = (t, b, c, d) ->
	t = t / d * 2
	return -c / 2 * (sqrt(1 - t * t) - 1) + b if t < 1
	t = t - 2
	c / 2 * (sqrt(1 - t * t) + 1) + b

export outInCirc = (t, b, c, d) ->
	return outCirc(t * 2, b, c / 2, d) if t < d / 2
	inCirc((t * 2) - d, b + c / 2, c / 2, d)

calculatePAS = (p, a, c, d) ->
	p, a = p or d * 0.3, a or 0
	return p, c, p / 4 if a < abs(c)
	p, a, p / (2 * pi) * asin(c/a)

export inElastic = (t, b, c, d, a, p) ->
	return b if t == 0
	t = t / d
	return b + c if t == 1
	p, a, s = calculatePAS(p, a, c, d)
	t = t - 1
	-(a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b

export outElastic = (t, b, c, d, a, p) ->
	return b if t == 0
	t = t / d
	return b + c if t == 1
	p, a, s = calculatePAS(p, a, c, d)
	a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p) + c + b

export inOutElastic = (t, b, c, d, a, p) ->
	return b if t == 0
	t = t / d * 2
	return b + c if t == 2
	p, a, s = calculatePAS(p, a, c, d)
	t = t - 1
	return -0.5 * (a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b if t < 0
	a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p ) * 0.5 + c + b

export outInElastic = (t, b, c, d, a, p) ->
	return outElastic(t * 2, b, c / 2, d, a, p) if t < d / 2
	inElastic((t * 2) - d, b + c / 2, c / 2, d, a, p)

export inBack = (t, b, c, d, s) ->
	s = s or 1.70158
	t = t / d
	c * t * t * ((s + 1) * t - s) + b

export outBack = (t, b, c, d, s) ->
	s = s or 1.70158
	t = t / d - 1
	c * (t * t * ((s + 1) * t + s) + 1) + b

export inOutBack = (t, b, c, d, s) ->
	s = (s or 1.70158) * 1.525
	t = t / d * 2
	return c / 2 * (t * t * ((s + 1) * t - s)) + b if t < 1
	t = t - 2
	c / 2 * (t * t * ((s + 1) * t + s) + 2) + b

export outInBack = (t, b, c, d, s) ->
	return outBack(t * 2, b, c / 2, d, s) if t < d / 2
	inBack((t * 2) - d, b + c / 2, c / 2, d, s)

export outBounce = (t, b, c, d) ->
	t = t / d
	return c * (7.5625 * t * t) + b if t < 1 / 2.75
	if t < 2 / 2.75
		t = t - (1.5 / 2.75)
		return c * (7.5625 * t * t + 0.75) + b
	elseif t < 2.5 / 2.75
		t = t - (2.25 / 2.75)
		return c * (7.5625 * t * t + 0.9375) + b

	t = t - (2.625 / 2.75)
	c * (7.5625 * t * t + 0.984375) + b

export inBounce = (t, b, c, d) -> c - outBounce(d - t, 0, c, d) + b

export inOutBounce = (t, b, c, d) ->
	return inBounce(t * 2, 0, c, d) * 0.5 + b if t < d / 2
	outBounce(t * 2 - d, 0, c, d) * 0.5 + c * .5 + b

export outInBounce = (t, b, c, d) ->
	return outBounce(t * 2, b, c / 2, d) if t < d / 2
	inBounce((t * 2) - d, b + c / 2, c / 2, d)
