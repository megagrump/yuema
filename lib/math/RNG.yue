import 'ffi'
import floor from math
import 'bit' as {
	:lshift
	:rshift
	:bnot
	:bxor
	:bor
}

RNG = ffi.typeof('struct { uint64_t _seed, _state; }')

-- Thomas Wang's 64-bit integer hashing function
-- https://web.archive.org/web/20110807030012/http://www.cris.com/%7ETtwang/tech/inthash.htm
wang = (key) ->
	key = bnot(key) + lshift(key, 21)
	key = bxor(key, rshift(key, 24))
	key += lshift(key, 3) + lshift(key, 8)
	key = bxor(key, rshift(key, 14))
	key += lshift(key, 2) + lshift(key, 4)
	key = bxor(key, rshift(key, 28))
	key + lshift(key, 31)

normalize = ffi.new('union { uint64_t i64; double d64; }')

RNGMT = {
	__new: (seed = 0x178392ac8fe399b1ULL) =>
		state = wang(ffi.cast('uint64_t', seed))
		state = wang(state) if state == 0
		ffi.new(@, seed, state)

	random: (lo, hi) =>
		state = @_state
		state = bxor(state, rshift(state, 12))
		state = bxor(state, lshift(state, 25))
		state = bxor(state, rshift(state, 27))
		@_state = state

		normalize.i64 = bor(lshift(0x3ffULL, 52), rshift(state * 2685821657736338717ULL, 12))
		r = normalize.d64 - 1
		if hi
			return floor(lo + r * (hi - lo + 1))
		if lo
			return floor(1 + lo * r)
		r

	getState: => @_state

	setState: (@_state) =>
}
RNGMT.__index = RNGMT

ffi.metatype(RNG, RNGMT)
