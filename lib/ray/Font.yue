import 'ffi'
import RL from yuema
import C from ffi
import 'lib.util.ptr'

GlyphInfo = ffi.typeof('GlyphInfo')
Font = ffi.typeof('Font')

gc = => ffi.gc(@, RL.UnloadFont)

FontMT = {
	DEFAULT: C,FONT_DEFAULT
	BITMAP: C,FONT_BITMAP
	SDF: C,FONT_SDF

	:GlyphInfo

	__gc: RL.UnloadFont

	load: (fileName) -> Font(RL.LoadFont(fileName))
	loadEx: (fileName, fontSize, fontChars, glyphCount) -> Font(RL.LoadFontEx(fileName, fontSize, fontChars, glyphCount))
	loadFromImage: (image, key, firstChar) -> Font(RL.LoadFontFromImage(image, key, firstChar))

	loadFromMemory: (fileType, fileData, dataSize, fontSize, fontChars, glyphCount) ->
		Font(RL.LoadFontFromMemory(fileType, fileData, dataSize, fontSize, fontChars, glyphCount))

	loadFontData: (fileData, dataSize, fontSize, fontChars, glyphCount, type) ->
		dataSize or= #fileData
		if data = ptr(RL.LoadFontData(fileData, dataSize, fontSize, fontChars, glyphCount, type))
			result = [ GlyphInfo(data[i]) for i = 0, glyphCount - 1 ]
			RL.UnloadFontData(data, glyphCount)
			return result
		nil

	getDefault: RL.GetFontDefault
	measureText: RL.MeasureText

	-- member functions --

	exportAsCode: RL.ExportFontAsCode
	measureTextEx: RL.MeasureTextEx
	getGlyphIndex: RL.GetGlyphIndex
	getGlyphInfo: RL.GetGlyphInfo
	getGlyphAtlasRec: RL.GetGlyphAtlasRec
}

FontMT.__index = FontMT

ffi.metatype(Font, FontMT)
