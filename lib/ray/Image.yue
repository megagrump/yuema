import 'ffi'
import 'lib.ray.Color'
import 'lib.util.ptr'
import C from ffi
import RL from yuema

Image = ffi.typeof('Image')

ImageMT = {
	UNCOMPRESSED_GRAYSCALE:    C.PIXELFORMAT_UNCOMPRESSED_GRAYSCALE
	UNCOMPRESSED_GRAY_ALPHA:   C.PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA
	UNCOMPRESSED_R5G6B5:       C.PIXELFORMAT_UNCOMPRESSED_R5G6B5
	UNCOMPRESSED_R8G8B8:       C.PIXELFORMAT_UNCOMPRESSED_R8G8B8
	UNCOMPRESSED_R5G5B5A1:     C.PIXELFORMAT_UNCOMPRESSED_R5G5B5A1
	UNCOMPRESSED_R4G4B4A4:     C.PIXELFORMAT_UNCOMPRESSED_R4G4B4A4
	UNCOMPRESSED_R8G8B8A8:     C.PIXELFORMAT_UNCOMPRESSED_R8G8B8A8
	UNCOMPRESSED_R32:          C.PIXELFORMAT_UNCOMPRESSED_R32
	UNCOMPRESSED_R32G32B32:    C.PIXELFORMAT_UNCOMPRESSED_R32G32B32
	UNCOMPRESSED_R32G32B32A32: C.PIXELFORMAT_UNCOMPRESSED_R32G32B32A32
	COMPRESSED_DXT1_RGB:       C.PIXELFORMAT_COMPRESSED_DXT1_RGB
	COMPRESSED_DXT1_RGBA:      C.PIXELFORMAT_COMPRESSED_DXT1_RGBA
	COMPRESSED_DXT3_RGBA:      C.PIXELFORMAT_COMPRESSED_DXT3_RGBA
	COMPRESSED_DXT5_RGBA:      C.PIXELFORMAT_COMPRESSED_DXT5_RGBA
	COMPRESSED_ETC1_RGB:       C.PIXELFORMAT_COMPRESSED_ETC1_RGB
	COMPRESSED_ETC2_RGB:       C.PIXELFORMAT_COMPRESSED_ETC2_RGB
	COMPRESSED_ETC2_EAC_RGBA:  C.PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA
	COMPRESSED_PVRT_RGB:       C.PIXELFORMAT_COMPRESSED_PVRT_RGB
	COMPRESSED_PVRT_RGBA:      C.PIXELFORMAT_COMPRESSED_PVRT_RGBA
	COMPRESSED_ASTC_4x4_RGBA:  C.PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA
	COMPRESSED_ASTC_8x8_RGBA:  C.PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA

	__gc: RL.UnloadImage

	load: (fileName) -> Image(RL.LoadImage(fileName))
	loadRaw: (fileName, width, height, format, headerSize) -> Image(RL.LoadImageRaw(fileName, width, height, format, headerSize))

	loadAnim: (fileName) ->
		frames = ffi.new('int[1]')
		result = Image(RL.LoadImageAnim(fileName, frames))
		result, tonumber(frames[0])

	loadFromMemory: (fileType, fileData, dataSize) -> Image(RL.LoadImageFromMemory(fileType, fileData, dataSize))
	loadFromTexture: (texture) -> Image(RL.LoadImageFromTexture!)
	loadFromScreen: -> Image(RL.LoadImageFromScreen!)
	genColor: (width, height, color) -> Image(RL.GenImageColor(width, height, color))
	genGradientV: (width, height, top, bottom) -> Image(RL.GenImageGradientV(width, height, top, bottom))
	genGradientH: (width, height, left, right) -> Image(RL.GenImageGradientH(width, height, left, right))

	genGradientRadial: (width, height, density, inner, outer) ->
		Image(RL.GenImageGradientRadial(width, height, density, inner, outer))

	genChecked: (width, height, checksX, checksY, col1, col2) ->
		Image(RL.GenImageChecked(width, height, checksX, checksY, col1, col2))

	genWhiteNoise: (width, height, factor) -> Image(RL.GenImageWhiteNoise(width, height, factor))
	genCellular: (width, height, tileSize) -> Image(RL.GenImageCellular(width, height, tileSize))

	genFontAtlas: (chars, glyphCount, fontSize, padding, packMethod) ->
		recs = ffi.new('Rectangle[?]', glyphCount)
		result = Image(RL.GenImageFontAtlas(chars, recs, glyphCount, fontSize, padding, packMethod))
		result, recs

	fromImage: (image, rec) -> Image(RL.ImageFromImage(image, rec))
	text: (text, fontSize, color) -> Image(RL.ImageText(text, fontSize, color))
	textEx: (font, text, fontSize, spacing, tint) -> Image(RL.ImageTextEx(font, text, fontSize, spacing, tint))

	-- member functions --

	copy: => Image(RL.ImageCopy(@))
	export: RL.ExportImage
	exportAsCode: RL.ExportImageAsCode
	format: RL.ImageFormat
	toPOT: RL.ImageToPOT
	crop: RL.ImageCrop
	alphaCrop: RL.ImageAlphaCrop
	alphaClear: RL.ImageAlphaClear
	alphaMask: RL.ImageAlphaMask
	alphaPremultiply: RL.ImageAlphaPremultiply
	resize: RL.ImageResize
	resizeNN: RL.ImageResizeNN

	resizeCanvas: RL.ImageResizeCanvas

	mipmaps: RL.ImageMipmaps
	dither: RL.ImageDither
	flipVertical: RL.ImageFlipVertical
	flipHorizontal: RL.ImageFlipHorizontal
	rotateCW: RL.ImageRotateCW
	rotateCCW: RL.ImageRotateCCW
	colorTint: RL.ImageColorTint
	colorInvert: RL.ImageColorInvert
	colorGrayscale: RL.ImageColorGrayscale
	colorContrast: RL.ImageColorContrast
	colorBrightness: RL.ImageColorBrightness
	colorReplace: RL.ImageColorReplace

	loadColors: =>
		if colors = ptr(RL.LoadImageColors(@))
			result = [ Color(colors[i].r, colors[i].g, colors[i].b, colors[i].a) for i = 0, @width * @height - 1 ]
			RL.UnloadImageColors(colors)
			return result
		nil

	loadPalette: =>
		colorCount = ffi.new('int[1]')
		if colors = ptr(RL.LoadImagePalette(@, maxPaletteSize, colorCount))
			result = [ Color(colors[i].r, colors[i].g, colors[i].b, colors[i].a) for i = 0, colorCount[0] - 1 ]
			RL.UnloadImagePalette(colors)
			return result, tonumber(colorCount[0])
		nil, 0

	getAlphaBorder: RL.GetImageAlphaBorder
	getColor: RL.GetImageColor
	clearBackground: RL.ImageClearBackground
	drawPixel: RL.ImageDrawPixel
	drawPixelV: RL.ImageDrawPixelV
	drawLine: RL.ImageDrawLine
	drawLineV: RL.ImageDrawLineV
	drawCircle: RL.ImageDrawCircle
	drawCircleV: RL.ImageDrawCircleV
	drawRectangle: RL.ImageDrawRectangle
	drawRectangleV: RL.ImageDrawRectangleV
	drawRectangleRec: RL.ImageDrawRectangleRec
	drawRectangleLines: RL.ImageDrawRectangleLines
	draw: RL.ImageDraw
	drawText: RL.ImageDrawText
	drawTextEx: RL.ImageDrawTextEx
}

ImageMT.__index = ImageMT

ffi.metatype(Image, ImageMT)
