import 'ffi'
import RL from yuema
import C from ffi

Shader = ffi.typeof('Shader')

ShaderMT = {
	LOC_MAP_DIFFUSE:       C.SHADER_LOC_MAP_ALBEDO
	LOC_MAP_SPECULAR:      C.SHADER_LOC_MAP_METALNESS
	LOC_VERTEX_POSITION:   C.SHADER_LOC_VERTEX_POSITION
	LOC_VERTEX_TEXCOORD01: C.SHADER_LOC_VERTEX_TEXCOORD01
	LOC_VERTEX_TEXCOORD02: C.SHADER_LOC_VERTEX_TEXCOORD02
	LOC_VERTEX_NORMAL:     C.SHADER_LOC_VERTEX_NORMAL
	LOC_VERTEX_TANGENT:    C.SHADER_LOC_VERTEX_TANGENT
	LOC_VERTEX_COLOR:      C.SHADER_LOC_VERTEX_COLOR
	LOC_MATRIX_MVP:        C.SHADER_LOC_MATRIX_MVP
	LOC_MATRIX_VIEW:       C.SHADER_LOC_MATRIX_VIEW
	LOC_MATRIX_PROJECTION: C.SHADER_LOC_MATRIX_PROJECTION
	LOC_MATRIX_MODEL:      C.SHADER_LOC_MATRIX_MODEL
	LOC_MATRIX_NORMAL:     C.SHADER_LOC_MATRIX_NORMAL
	LOC_VECTOR_VIEW:       C.SHADER_LOC_VECTOR_VIEW
	LOC_COLOR_DIFFUSE:     C.SHADER_LOC_COLOR_DIFFUSE
	LOC_COLOR_SPECULAR:    C.SHADER_LOC_COLOR_SPECULAR
	LOC_COLOR_AMBIENT:     C.SHADER_LOC_COLOR_AMBIENT
	LOC_MAP_ALBEDO:        C.SHADER_LOC_MAP_ALBEDO
	LOC_MAP_METALNESS:     C.SHADER_LOC_MAP_METALNESS
	LOC_MAP_NORMAL:        C.SHADER_LOC_MAP_NORMAL
	LOC_MAP_ROUGHNESS:     C.SHADER_LOC_MAP_ROUGHNESS
	LOC_MAP_OCCLUSION:     C.SHADER_LOC_MAP_OCCLUSION
	LOC_MAP_EMISSION:      C.SHADER_LOC_MAP_EMISSION
	LOC_MAP_HEIGHT:        C.SHADER_LOC_MAP_HEIGHT
	LOC_MAP_CUBEMAP:       C.SHADER_LOC_MAP_CUBEMAP
	LOC_MAP_IRRADIANCE:    C.SHADER_LOC_MAP_IRRADIANCE
	LOC_MAP_PREFILTER:     C.SHADER_LOC_MAP_PREFILTER
	LOC_MAP_BRDF:          C.SHADER_LOC_MAP_BRDF

	UNIFORM_FLOAT:     C.SHADER_UNIFORM_FLOAT
	UNIFORM_VEC2:      C.SHADER_UNIFORM_VEC2
	UNIFORM_VEC3:      C.SHADER_UNIFORM_VEC3
	UNIFORM_VEC4:      C.SHADER_UNIFORM_VEC4
	UNIFORM_INT:       C.SHADER_UNIFORM_INT
	UNIFORM_IVEC2:     C.SHADER_UNIFORM_IVEC2
	UNIFORM_IVEC3:     C.SHADER_UNIFORM_IVEC3
	UNIFORM_IVEC4:     C.SHADER_UNIFORM_IVEC4
	UNIFORM_SAMPLER2D: C.SHADER_UNIFORM_SAMPLER2D

	ATTRIB_FLOAT: C.SHADER_ATTRIB_FLOAT
	ATTRIB_VEC2:  C.SHADER_ATTRIB_VEC2
	ATTRIB_VEC3:  C.SHADER_ATTRIB_VEC3
	ATTRIB_VEC4:  C.SHADER_ATTRIB_VEC4

	load: (vsFileName, fsFileName) -> Shader(RL.LoadShader(vsFileName, fsFileName))
	loadFromMemory: (vsCode, fsCode) -> Shader(RL.LoadShaderFromMemory(vsCode, fsCode))

	-- member functions --

	__gc: RL.UnloadShader

	getLocation: RL.GetShaderLocation
	getLocationAttrib: RL.GetShaderLocationAttrib
	setValue: RL.SetShaderValue
	setValueV: RL.SetShaderValueV
	setValueMatrix: RL.SetShaderValueMatrix
	setValueTexture: RL.SetShaderValueTexture
}

ShaderMT.__index = ShaderMT

ffi.metatype(Shader, ShaderMT)
